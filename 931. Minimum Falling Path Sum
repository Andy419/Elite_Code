    def minFallingPathSum(self, matrix: List[List[int]]) -> int:
        
        # brute Force Too Slow
#         def tripsearch(r, c, count):
#             if (-1 < c < len(matrix)):            
#                 count += matrix[r][c]
#             else:
#                 return self.maxso
            
#             if r == len(matrix) - 1:
#                 return count
            
#             return min(tripsearch(r+1, c, count), tripsearch(r+1, c-1, count), tripsearch(r+1, c+1, count))
            
            
#         self.maxso = 101 * len(matrix)
#         minso = self.maxso
        
#         for i in range(len(matrix)):
#             minso = min(minso, tripsearch(0, i, 0))
        
#         return minso

        for i in range(1, len(matrix)):
            for j in range(len(matrix)):
                if j == 0:
                    matrix[i][j] += min(matrix[i-1][j], matrix[i-1][j+1])
                elif j == len(matrix) - 1:
                    matrix[i][j] += min(matrix[i-1][j], matrix[i-1][j-1])
                else:
                    matrix[i][j] += min(matrix[i-1][j], matrix[i-1][j-1], matrix[i-1][j+1])
                

        return min(matrix[len(matrix) - 1])